"""Initial schema: 7 core tables for MEM-001

Revision ID: c171dc5922ec
Revises: 
Create Date: 2025-09-30 05:08:43.864159

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c171dc5922ec'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('provider_health',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Auto-increment PK'),
    sa.Column('provider_id', sa.String(length=100), nullable=False, comment='Provider identifier (openai, anthropic, gemini)'),
    sa.Column('timestamp', sa.DateTime(), nullable=False, comment='Health check timestamp (UTC)'),
    sa.Column('latency_ms', sa.Integer(), nullable=True, comment='Response latency in milliseconds'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='Health check success flag'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if health check failed'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_provider_health_provider_id'), 'provider_health', ['provider_id'], unique=False)
    op.create_index('ix_provider_health_timestamp', 'provider_health', ['provider_id', 'timestamp'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key (UUID)'),
    sa.Column('external_id', sa.String(length=255), nullable=False, comment='External identity (e.g., OAuth sub, API key hash)'),
    sa.Column('role', sa.String(length=50), nullable=False, comment='User role (user, admin, etc.)'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Account creation timestamp (UTC)'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('external_id')
    )
    op.create_table('provider_preferences',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID (PK, FK)'),
    sa.Column('default_provider', sa.String(length=100), nullable=True, comment='Default provider (openai, anthropic, gemini)'),
    sa.Column('default_model', sa.String(length=100), nullable=True, comment='Default model for the provider'),
    sa.Column('temperature', sa.Numeric(precision=3, scale=2), nullable=True, comment='Default temperature (0.00 - 2.00)'),
    sa.Column('fallback_policy', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Fallback policy configuration (JSONB)'),
    sa.Column('updated_at', sa.DateTime(), nullable=False, comment='Last update timestamp (UTC)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('rate_limits',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID (PK, FK)'),
    sa.Column('window_start', sa.DateTime(), nullable=False, comment='Rate limit window start (UTC)'),
    sa.Column('window_end', sa.DateTime(), nullable=False, comment='Rate limit window end (UTC)'),
    sa.Column('requests', sa.Integer(), nullable=False, comment='Requests consumed in window'),
    sa.Column('tokens', sa.Integer(), nullable=False, comment='Tokens consumed in window'),
    sa.Column('limit_requests', sa.Integer(), nullable=False, comment='Max requests allowed in window'),
    sa.Column('limit_tokens', sa.Integer(), nullable=False, comment='Max tokens allowed in window'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('ix_rate_limits_window', 'rate_limits', ['user_id', 'window_start', 'window_end'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False, comment='Session ID (UUID)'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Owner user ID'),
    sa.Column('title', sa.String(length=500), nullable=True, comment='Session title (optional)'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Session metadata (JSONB)'),
    sa.Column('started_at', sa.DateTime(), nullable=False, comment='Session start time (UTC)'),
    sa.Column('last_active_at', sa.DateTime(), nullable=False, comment='Last activity timestamp (UTC)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    op.create_table('usage_log',
    sa.Column('request_id', sa.UUID(), nullable=False, comment='Request ID (UUID, PK)'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who made the request'),
    sa.Column('provider', sa.String(length=100), nullable=False, comment='Provider used'),
    sa.Column('model', sa.String(length=100), nullable=False, comment='Model used'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Request status (success, error, timeout)'),
    sa.Column('latency_ms', sa.Integer(), nullable=False, comment='Request latency in milliseconds'),
    sa.Column('tokens_in', sa.Integer(), nullable=True, comment='Input tokens'),
    sa.Column('tokens_out', sa.Integer(), nullable=True, comment='Output tokens'),
    sa.Column('cost_usd', sa.Numeric(precision=10, scale=6), nullable=True, comment='Cost in USD (6 decimal precision)'),
    sa.Column('fallback_chain', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Fallback chain if primary provider failed'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Log entry timestamp (UTC)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('request_id')
    )
    op.create_index('ix_usage_log_created_at', 'usage_log', ['created_at'], unique=False)
    op.create_index('ix_usage_log_status', 'usage_log', ['status'], unique=False)
    op.create_index(op.f('ix_usage_log_user_id'), 'usage_log', ['user_id'], unique=False)
    op.create_index('ix_usage_log_user_provider', 'usage_log', ['user_id', 'provider'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False, comment='Message ID (UUID)'),
    sa.Column('session_id', sa.UUID(), nullable=False, comment='Parent session ID'),
    sa.Column('role', sa.String(length=50), nullable=False, comment='Message role (user, assistant, system)'),
    sa.Column('content', sa.Text(), nullable=False, comment='Message content'),
    sa.Column('provider', sa.String(length=100), nullable=True, comment='Provider used (openai, anthropic, gemini)'),
    sa.Column('model', sa.String(length=100), nullable=True, comment='Model used (e.g., gpt-4, claude-opus-4-1)'),
    sa.Column('tokens_in', sa.Integer(), nullable=True, comment='Input tokens consumed'),
    sa.Column('tokens_out', sa.Integer(), nullable=True, comment='Output tokens generated'),
    sa.Column('latency_ms', sa.Integer(), nullable=True, comment='Response latency in milliseconds'),
    sa.Column('request_id', sa.UUID(), nullable=True, comment='Request ID for tracing'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Message creation timestamp (UTC)'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_messages_request_id', 'messages', ['request_id'], unique=False)
    op.create_index('ix_messages_session_created', 'messages', ['session_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_messages_session_id'), 'messages', ['session_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_messages_session_id'), table_name='messages')
    op.drop_index('ix_messages_session_created', table_name='messages')
    op.drop_index('ix_messages_request_id', table_name='messages')
    op.drop_table('messages')
    op.drop_index('ix_usage_log_user_provider', table_name='usage_log')
    op.drop_index(op.f('ix_usage_log_user_id'), table_name='usage_log')
    op.drop_index('ix_usage_log_status', table_name='usage_log')
    op.drop_index('ix_usage_log_created_at', table_name='usage_log')
    op.drop_table('usage_log')
    op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('ix_rate_limits_window', table_name='rate_limits')
    op.drop_table('rate_limits')
    op.drop_table('provider_preferences')
    op.drop_table('users')
    op.drop_index('ix_provider_health_timestamp', table_name='provider_health')
    op.drop_index(op.f('ix_provider_health_provider_id'), table_name='provider_health')
    op.drop_table('provider_health')
    # ### end Alembic commands ###
